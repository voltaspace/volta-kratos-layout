// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SweetClient is the client API for Sweet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SweetClient interface {
	// Sends a Sweet
	Ping(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*BaseReply, error)
}

type sweetClient struct {
	cc grpc.ClientConnInterface
}

func NewSweetClient(cc grpc.ClientConnInterface) SweetClient {
	return &sweetClient{cc}
}

func (c *sweetClient) Ping(ctx context.Context, in *BaseReq, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, "/pb.v1.Sweet/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SweetServer is the server API for Sweet service.
// All implementations must embed UnimplementedSweetServer
// for forward compatibility
type SweetServer interface {
	// Sends a Sweet
	Ping(context.Context, *BaseReq) (*BaseReply, error)
	mustEmbedUnimplementedSweetServer()
}

// UnimplementedSweetServer must be embedded to have forward compatible implementations.
type UnimplementedSweetServer struct {
}

func (UnimplementedSweetServer) Ping(context.Context, *BaseReq) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedSweetServer) mustEmbedUnimplementedSweetServer() {}

// UnsafeSweetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SweetServer will
// result in compilation errors.
type UnsafeSweetServer interface {
	mustEmbedUnimplementedSweetServer()
}

func RegisterSweetServer(s grpc.ServiceRegistrar, srv SweetServer) {
	s.RegisterService(&Sweet_ServiceDesc, srv)
}

func _Sweet_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SweetServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.v1.Sweet/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SweetServer).Ping(ctx, req.(*BaseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sweet_ServiceDesc is the grpc.ServiceDesc for Sweet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sweet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.v1.Sweet",
	HandlerType: (*SweetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Sweet_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/v1/sweet.proto",
}
